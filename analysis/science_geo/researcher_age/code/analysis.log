
  ___  ____  ____  ____  ____ ®
 /__    /   ____/   /   ____/      17.0
___/   /   /___/   /   /___/       MP—Parallel Edition

 Statistics and Data Science       Copyright 1985-2021 StataCorp LLC
                                   StataCorp
                                   4905 Lakeway Drive
                                   College Station, Texas 77845 USA
                                   800-STATA-PC        https://www.stata.com
                                   979-696-4600        stata@stata.com

Stata license: Unlimited-user 4-core network, expiring 17 Nov 2024
Serial number: 501809301897
  Licensed to: Harvard Business School
               Research Computing

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. More than 2 billion observations are allowed; see help obs_advice.
      4. Maximum number of variables is set to 120,000; see help set_maxvar.

. do "/export/home/dor/cxu/innovation_projs/analysis/science_geo/age_cohorts/co
> de/analysis.do" 

. set more off

. clear all

. capture log close

. program drop _all

. set scheme modern

. graph set window fontface "Arial Narrow"
not available in non-GUI version

. pause on

. set seed 8975

. global temp "/export/scratch/cxu_sci_geo/age_cohort"

. global year_insts "/export/scratch/cxu_sci_geo/clean_athr_inst_hist_output"

. global y_name "Productivity"

. global pat_adj_wt_name "Patent-to-Paper Citations"

. global ln_patent_name "Log Patent-to-Paper Citations"

. global ln_y_name "Log Productivity"

. global x_name "Cluster Size"

. global ln_x_name "Log Cluster Size"

. global time year 

. 
. program main
  1.     get_athr_prod
  2.     foreach t in year {
  3.         find_age, samp(`t')
  4.         /*make_movers, samp(`t')
>         sum_stats, samp(`t')
>         qui output_tables, samp(`t')
>         event_studies, samp(`t')*/
.     }
  5. end

. 
. program get_athr_prod
  1.     use ../external/samp/cleaned_all_all_jrnls.dta, clear
  2.     gcollapse (count) num_pprs = pmid (sum) cite_affl_wt body_adj_wt impac
> t_affl_wt affl_wt impact_cite_affl_wt, by(athr_id year)
  3.     compress, nocoalesce
  4.     save ../temp/athr_prod, replace
  5. end

. 
. program find_age
  1.     syntax, samp(str)
  2.     // find your publishing birth year first
.     use ${${time}_insts}/filled_in_panel_all_${time}, clear
  3.     gcontract athr_id year
  4.     drop _freq 
  5.     bys athr_id : gen year_rank = _n
  6.     by athr_id: gegen first_yr = min(year)
  7.     by athr_id: gegen last_yr = max(year)
  8.     /*by athr_id: gen second_yr = year if year_rank == 2
>     hashsort athr_id second_yr
>     by athr_id: replace second_yr = second_yr[_n-1] if mi(second_yr)
>     gen first_second_diff = second_yr - first_yr
>     replace first_yr = second_yr if  first_second_diff >= 10 & !mi(first_seco
> nd_diff) & !mi(second_yr)*/
.     keep if year_rank == 1 
  9.     gisid athr_id 
 10.     gcontract athr_id first_yr last_yr
 11.     drop _freq
 12. 
.     // find your pubishing in the top 15 birthday no matter when 
.     merge 1:m athr_id using ../temp/athr_prod, assert(1 3) keep(3) nogen
 13.     bys athr_id: egen first_yr_in_top15 = min(year)
 14.     gcontract athr_id first_yr last_yr first_yr_in_top15
 15.     drop _freq
 16.     merge 1:1 athr_id using ../external/dissertation/appended_pprs, assert
> (1 2 3) keep(1 3) nogen
 17.     gunique athr_id 
 18.     local N_athrs = r(unique)
 19.     gunique athr_id if !mi(phd_year)
 20.     di "% of US authors with disseration year: " r(unique)/`N_athrs'*100
 21.     gunique athr_id if dissertation_tag == 1  
 22.     di "% of US authors with disseration tag: " r(unique)/`N_athrs'*100
 23.     gunique athr_id if dissertation_tag == 0 & strpos(lwr_title, "disserta
> tion")>0 | strpos(lwr_title, "thesis")>0  
 24.     di "% of US authors with disseration title " r(unique)/`N_athrs'*100
 25.     compress, nocoalesce
 26.     gen publishing_age= 2023-first_yr + 1 
 27.     gen publishing_lifespan= last_yr-first_yr + 1 
 28.     gen post_phd = phd_year - first_yr + 1
 29.     gen top15_post_phd = phd_year - first_yr_in_top15 + 1
 30.     gen top15_pub_diff = first_yr_in_top15 - first_yr
 31.     gen post_phd_lifespan = last_yr - phd_year + 1  
 32.     gegen publishing_lifespan99 = pctile(publishing_lifespan), p(99)
 33.     gegen post_phd_lifespan99 = pctile(post_phd_lifespan), p(99)
 34.     gen windsorize = publishing_lifespan >= publishing_lifespan99 | (post_
> phd_lifespan >= post_phd_lifespan99 & !mi(phd_year))
 35.     foreach var in first_yr last_yr first_yr_in_top15 phd_year publishing_
> age publishing_lifespan post_phd top15_post_phd post_phd_lifespan {
 36.         replace `var' = . if windsorize == 1  
 37.     }
 38.     gen cohort_bin = floor(phd_year/10)*10
 39.     replace cohort_bin = cohort_bin + 5 if phd_year >= cohort_bin+5
 40.     gisid athr_id
 41.     preserve
 42.     merge 1:m athr_id using ../temp/athr_prod, assert(3) keep(3) nogen 
 43.     gen age = year - first_yr 
 44.     drop if mi(age)
 45.     bys age athr_id: gen athr_cnt = _n == 1
 46.     gen sd = impact_cite_affl_wt
 47.     gcollapse (sum) athr_cnt (mean) impact_cite_affl_wt (sd) sd, by(age)
 48.     save ../temp/age_prod, replace
 49.     restore
 50.     preserve
 51.     merge 1:m athr_id using ../temp/athr_prod, assert(1 3) keep(3) nogen 
 52.     gen age = year - phd_year  if !mi(phd_year)
 53.     bys age athr_id: gen athr_cnt = _n == 1
 54.     gen sd = impact_cite_affl_wt
 55.     gcollapse (sum) athr_cnt (mean) impact_cite_affl_wt (sd) sd, by(age)
 56.     save ../temp/phd_age_prod, replace
 57.     restore
 58.     save ../temp/age_`samp', replace
 59. end

. 
. 
. program make_movers
  1.     syntax, samp(str)
  2.     use ${${time}_insts}/filled_in_panel_${time}, clear
  3.     keep if country_code == "US"
  4.     hashsort athr_id year
  5.     gen place_count =  1 if inst_id != inst_id[_n-1] & msa_comb != msa_com
> b[_n-1]
  6.     bys athr_id: egen num_moves = total(place_count)
  7.     bys athr_id (year): gen which_place = sum(place_count)
  8.     bys athr_id: gen athr_counter =  _n == 1
  9.     replace num_moves = num_moves-1
 10.     bys athr_id (year) : gen move_year = year if place_count == 1  & _n !=
>  1
 11.     gcontract athr_id move_year num_moves 
 12.     drop _freq
 13.     drop if mi(move_year)
 14.     drop if num_moves <= 0
 15.     save ../temp/movers, replace
 16.     
.     use if !mi(msa_comb) & !mi(inst_id) using ../external/samp/athr_panel_ful
> l_comb_`samp', clear 
 17.     hashsort athr_id year
 18.     gen place_count =  1 if inst_id != inst_id[_n-1] & msa_comb != msa_com
> b[_n-1]
 19.     bys athr_id: egen num_moves = total(place_count)
 20.     bys athr_id (year): gen which_place = sum(place_count)
 21.     bys athr_id: gen athr_counter =  _n == 1
 22.     replace num_moves = num_moves-1
 23.     gen mover = num_moves > 0 
 24.     tab num_moves if athr_counter == 1 & mover == 1
 25.     tab mover if athr_counter == 1
 26.     bys athr_id year: gen athr_year_counter =  _n == 1
 27.     tab mover if athr_year_counter == 1
 28.     replace which_place = 0 if mover == 0
 29.     replace which_place = 1 if which_place == 0 & mover == 1
 30.     bys athr_id: egen min_which_place =min(which_place)
 31.     replace which_place = which_place + 1 if mover == 1 & min_which_place 
> == 0
 32.     drop min_which_place
 33.     hashsort athr_id year 
 34.     bys athr_id (year): gen origin = 1 if which_place == 1
 35.     gen dest = place_count == 1 & origin != 1 & mover == 1
 36.     bys athr_id (year): replace origin = 1 if mover == 1 & place_count[_n+
> 1] == 1 & mi(origin) 
 37.     hashsort athr_id which_place origin
 38.     bys athr_id which_place:  replace origin = origin[_n-1] if mi(origin) 
> & !mi(origin[_n-1])
 39. 
.     preserve
 40.     keep if mover == 1 & num_moves == 1 
 41.     gcontract athr_id year
 42.     drop _freq
 43.     bys athr_id: egen min_year = min(year)
 44.     bys athr_id: egen max_year = max(year)
 45.     gcontract athr_id min_year max_year
 46.     drop _freq
 47.     save ../temp/single_movers_`samp', replace
 48.     merge 1:m athr_id using ../temp/movers, assert(1 2 3) keep(3) nogen
 49.     keep if move_year >= min_year & move_year <= max_year
 50.     gcontract athr_id move_year 
 51.     drop _freq
 52.     bys athr_id: gen N = _n 
 53.     keep if N == 1
 54.     save ../temp/mover_xw, replace
 55.     restore
 56. 
.     merge m:1 athr_id using ../temp/mover_xw, assert(1 2 3) keep(1 3) 
 57.     bys inst_id year: egen has_mover = max(mover == 1)
 58.     drop if has_mover == 0
 59.     gen analysis_cond = mover == 1 & num_moves == 1 & ((mover == 0 & _merg
> e == 1) | (mover == 1 & _merge == 3))
 60.     drop _merge
 61.     save ${temp}/mover_temp_`samp' , replace
 62. end

. 
. program sum_stats
  1.     syntax, samp(str)
  2.     use ${temp}/mover_temp_`samp' , clear  
  3.     merge m:1 athr_id using ../temp/age_`samp', assert(2 3) keep(3) nogen
  4.     // plot stats at the author level
.     preserve
  5.     gcontract athr_id analysis_cond publishing_age publishing_lifespan pos
> t_phd top15_post_phd phd_year first_yr first_yr_in_top15 last_yr top15_pub_di
> ff post_phd_lifespan
  6.     drop _freq
  7.     gisid athr_id
  8.     corr first_yr phd_year
  9.     local n = r(N)
 10.     local corr: di %3.2f r(rho) 
 11.     binscatter2 first_yr phd_year, xtitle("PhD Graduation Year", size(smal
> l)) ytitle("Publishing Birth Year", size(small)) legend(on  order(- "N = `n'"
>  "corr. = `corr'") pos(11) ring(0) region(fcolor(none)) size(small)) xlab(194
> 5(5)2022, labsize(small)) ylab(1945(5)2022, labsize(small))
 12.     graph export ../output/figures/bs_phd_pub_yr.pdf, replace 
 13.     gisid athr_id 
 14.     local gap 5
 15.     local pos 10
 16.     foreach var in phd_year first_yr publishing_age post_phd top15_post_ph
> d first_yr_in_top15 top15_pub_diff {
 17.         sum `var', d
 18.         local min_year = r(min)
 19.         local max_year = r(max)
 20.         qui sum `var' if analysis_cond == 1 , d
 21.         local mover_mean: di %3.2f r(mean)
 22.         local mover_med: di %3.2f r(p50)
 23.         local mover_N = r(N)
 24.         qui sum `var' if analysis_cond == 0 , d
 25.         local nonmover_mean: di %3.2f r(mean)
 26.         local nonmover_med: di %3.2f r(p50)
 27.         local nonmover_N = r(N)
 28.         if "`var'" == "phd_year" local xtit = "PhD Graduation Year"
 29.         if "`var'" == "first_yr" {
 30.             local xtit = "Publishing Birth Year"
 31.             local gap = 10
 32.         }
 33.         if "`var'" == "first_yr_in_top15" {
 34.             local xtit = "Top 15 First/Last Author Publishing Birth Year"
 35.             local gap = 4 
 36.             local pos = 11
 37.         }
 38.         if "`var'" == "publishing_age" {
 39.             local xtit = "Publishing Age (2023-Publishing Birth Year)"
 40.             local gap = 10
 41.             local pos = 1
 42.         }
 43.         if "`var'" == "post_phd" {
 44.             local xtit = "PhD Graduation Year - Publishing Birth Year"
 45.             local gap = 10
 46.         }
 47.         if "`var'" == "top15_post_phd" {
 48.             local xtit = "PhD Graduation Year - Top 15 First/Last Author P
> ublishing Birth Year"
 49.             local gap = 10
 50.         }
 51.         if "`var'" == "top15_pub_diff" {
 52.             local xtit = "Years it Takes to Publish in the Top 15"
 53.             local gap = 10
 54.             local pos = 1
 55.         }
 56.         tw hist `var' if analysis_cond == 1 , frac color(eltgreen%60) xlin
> e(`mover_mean', lcolor(eltgreen) lpattern(dash)) || ///
>            hist `var' if analysis_cond == 0, frac color(dkorange%60)  xline(`
> nonmover_mean', lcolor(dkorange) lpattern(dash)) ///
>            ytitle("Share of authors", size(vsmall)) xtitle("`xtit'", size(vsm
> all)) xlab(`min_year'(`gap')`max_year', labsize(vsmall) angle(45)) ylab(, lab
> size(vsmall)) ///
>            legend(on label(1 "Movers: " "N = `mover_N'" "mean = `mover_mean'"
>  "median = `mover_med'") label(2 "Nonmovers: " "N = `nonmover_N'" "mean = `no
> nmover_mean'" "median = `nonmover_med'") pos(`pos') ring(0) size(vsmall) regi
> on(fcolor(none)))
 57.         graph export ../output/figures/`var'_dist_`samp'.pdf, replace
 58.     }
 59.     restore
 60. 
.     // create tables of phd_year ?
.     preserve
 61.     gcontract athr_id cohort_bin
 62.     drop _freq
 63.     drop if mi(cohort_bin)
 64.     gcontract cohort_bin, freq(num_athrs)
 65.     sum num_athrs
 66.     gen perc = num_athrs/r(sum)*100
 67.     mkmat cohort_bin num_athrs perc, mat(cohort_dist_`samp')
 68.     restore
 69. 
.     preserve
 70.     gcontract athr_id publishing_age 
 71.     drop _freq
 72.     gcontract publishing_age, freq(num_athrs)
 73.     sum num_athrs
 74.     gen perc = num_athrs/r(sum)*100
 75.     mkmat publishing_age num_athrs perc, mat(pub_age_dist_`samp')
 76.     restore
 77.     
.     gen patented = pat_wt > 0
 78.     gegen msa = group(msa_comb)
 79.     gen ln_y = ln(impact_cite_affl_wt)
 80.     gen ln_x = ln(msa_size)
 81.     gen ln_patent = ln(pat_adj_wt)
 82.     rename impact_cite_affl_wt y
 83.     rename msa_size x
 84. 
.     // individual level stats
.     gen ln_affl_wt = ln(affl_wt)
 85.     gcollapse (mean) msa_y = y msa_x = x msa_ln_y = ln_y msa_ln_x = ln_x m
> sa_ln_patent = ln_patent msa_patent = pat_adj_wt msa_patent_rate = patented m
> sa_affl_wt = affl_wt msa_ln_affl_wt = ln_affl_wt (firstnm) msa , by(inst_id $
> {time}) 
 86.     save ${temp}/msa_`samp'_collapsed, replace
 87. 
.     use if analysis_cond == 1  using ${temp}/mover_temp_`samp' , clear  
 88.     merge m:1 athr_id using ../temp/mover_xw, assert(1 2 3) keep(3) nogen
 89.     gen ln_y = ln(impact_cite_affl_wt)
 90.     gen ln_x = ln(msa_size)
 91.     gen ln_patent = ln(pat_adj_wt)
 92.     gen ln_affl_wt = ln(affl_wt)
 93.     gen patented = pat_wt > 0
 94.     hashsort athr_id which_place year
 95.     rename impact_cite_affl_wt y
 96.     rename msa_size x
 97.     gen rel = year - move_year
 98.     foreach var in y x  ln_x ln_y ln_patent ln_affl_wt patented {
 99.         bys athr_id which_place: egen avg_`var' = mean(`var') 
100.     }
101.     hashsort athr_id which_place -year
102.     gduplicates drop athr_id which_place, force
103.     rename year current_year
104.     gen year = current_year if which_place == 1
105.     replace year = move_year if which_place == 2
106.     merge m:1 inst_id year using ${temp}/msa_`samp'_collapsed, assert(1 2 
> 3) keep(3) nogen
107.     hashsort athr_id which_place year
108.     foreach var in msa_ln_y msa_ln_x msa_ln_patent avg_ln_y avg_ln_x avg_l
> n_patent {
109.         if strpos("`var'", "msa_") > 0 {
110.             local type "Destination-Origin Difference in"
111.             local stem = subinstr("`var'", "msa_","",.)
112.         }
113.         if strpos("`var'", "avg_") > 0 {
114.             local type "Change in"
115.             local stem = subinstr("`var'", "avg_","",.)
116.         }
117.         by athr_id (which_place year): gen `var'_diff = `var'[_n+1] - `var
> '
118.     }
119.     gcontract athr_id avg_ln_y_diff avg_ln_x_diff msa_ln_y_diff msa_ln_x_d
> iff move_year
120.     drop _freq
121.     drop if mi(avg_ln_y_diff)
122.     save ../temp/dest_origin_changes, replace
123. end

. 
. program event_studies 
  1.     syntax, samp(str) 
  2.     cap mat drop _all  
  3.     use if analysis_cond == 1 using ${temp}/mover_temp_`samp' , clear  
  4.     merge m:1 athr_id using ../temp/mover_xw, assert(1 2 3) keep(3) nogen
  5.     merge m:1 athr_id using ../temp/age_`samp', assert(2 3) keep(3) nogen
  6.     keep athr_id inst field year msa_comb impact_cite_affl_wt msa_size whi
> ch_place inst_id move_year publishing_age publishing_lifespan post_phd top15_
> post_phd phd_year first_yr first_yr_in_top15 last_yr top15_pub_diff post_phd_
> lifespan cohort_bin
  7.     hashsort athr_id year
  8.     gen rel = year - move_year
  9.     merge m:1 athr_id move_year using ../temp/dest_origin_changes, keep(3)
>  nogen
 10.     hashsort athr_id year
 11.     gegen msa = group(msa_comb)
 12.     rename inst inst_name
 13.     gegen inst = group(inst_id)
 14.     gen ln_y = ln(impact_cite_affl_wt)
 15.     forval i = 1/10 {
 16.         gen lag`i' = 1 if rel == -`i'
 17.         gen lead`i' = 1 if rel == `i'
 18.     }
 19.     ds lead* lag*
 20.     foreach var in `r(varlist)' {
 21.         replace `var' = 0 if mi(`var')
 22.         replace `var' = `var'*msa_ln_y_diff
 23.     }
 24.     gen treat = msa_ln_y_diff if rel == 0  
 25.     replace treat = 0 if mi(treat)
 26.     local leads
 27.     local lags
 28.     forval i = 1/10 {
 29.         local leads `leads' lead`i'
 30.         local lags lag`i' `lags'
 31.     }
 32.     gunique athr_id 
 33.     local num_movers = r(unique)
 34.     // assume you're 25 when you first publish 
.     // assume you're 28 when you graduate your phd
.     gen move_age_pub = move_year - first_yr  + 1 + 25
 35.     gen move_age_phd = move_year - phd_year + 1 + 28 
 36. *    replace move_age_phd = . if move_age_phd <=0 
.     bys athr_id: gen counter = _n == 1
 37.     corr move_age_pub move_age_phd if counter == 1  
 38.     local n = r(N)
 39.     local corr: di %3.2f r(rho) 
 40.     binscatter2 move_age_pub move_age_phd if counter == 1 , xtitle("Move A
> ge (based on PhD)", size(small)) ytitle("Move Age (based on Publishing Birth 
> Year)", size(small)) legend(on  order(- "N = `n'" "corr. = `corr'") pos(11) r
> ing(0) region(fcolor(none)) size(small)) xlab(, labsize(small)) ylab(, labsiz
> e(small))
 41.     graph export ../output/figures/bs_phd_pub_move_yr.pdf, replace 
 42.     foreach var in move_age_pub move_age_phd {
 43.         sum `var' if counter == 1 , d
 44.         local N = r(N)
 45.         local median : dis %3.2f r(p50) 
 46.         local mean : dis %3.2f r(mean)
 47.         tw hist `var' if counter == 1 & `var' > 0, frac ytitle("Share of m
> overs", size(vsmall)) xtitle("Move Age", size(vsmall)) color(edkblue) legend(
> on order(- "N = `N'" ///
>                         "Mean = `mean'" ///
>                         "Median = `median'") pos(1) ring(0) size(vsmall) regi
> on(fcolor(none))) xlab(, labsize(vsmall)) ylab(, labsize(vsmall))
 48.         graph export ../output/figures/`var'.pdf, replace
 49.     }
 50.     qui sum move_age_pub if counter == 1, d
 51.     gen old = move_age_pub >= r(p50) 
 52.     gen young = move_age_pub < r(p50) 
 53.     qui sum move_age_phd if counter == 1 & !mi(move_age_phd), d
 54.     gen old_phd = move_age_phd >= r(p50) if !mi(move_age_phd)
 55.     gen young_phd = move_age_phd < r(p50) if !mi(move_age_phd)
 56.     foreach stem in "" "_phd"  {
 57.         sum msa_ln_y_diff if old`stem' == 1 & counter == 1
 58.         local N_old = r(N)
 59.         local mean_old :di %3.2f r(mean)
 60.         sum msa_ln_y_diff if young`stem' == 1& counter == 1
 61.         local N_young = r(N)
 62.         local mean_young : di %3.2f r(mean)
 63.         graph tw hist msa_ln_y_diff if old`stem' == 1& counter == 1 , frac
>  color(edkblue) xline(`mean_old', lpattern(dash)) || ///
>            hist msa_ln_y_diff if young`stem' == 1 & counter == 1 , frac color
> (lavender%50) xline(`mean_young', lpattern(dash)) ytitle("Share of movers", s
> ize(vsmall)) xtitle("Destination-Origin Diff in Log Productivity", size(vsmal
> l))  legend(on order(- "N Old = `N_old'" ///
>                         "Mean Old = `mean_old'" ///
>                         "N Young = `N_young'" ///
>                         "Mean Young = `mean_young'") pos(1) ring(0) size(vsma
> ll) region(fcolor(none))) xlab(, labsize(vsmall)) ylab(, labsize(vsmall))
 64. 
.         graph export ../output/figures/move_size`stem'.pdf, replace
 65.         foreach c in "inrange(rel, -10,10) & old`stem' ==1" "inrange(rel, 
> -10,10) & young`stem' == 1" { 
 66.             cap mat drop _all 
 67.             local timeframe 10
 68.             preserve
 69.             if "`c'" == "inrange(rel, -10,10) & old`stem' ==1" local suf =
>  "old" 
 70.             if "`c'" == "inrange(rel, -10,10) & young`stem' == 1" local su
> f = "young" 
 71.             reghdfe ln_y `lags' treat `leads' if `c' , absorb(year field m
> sa field#year field#msa  inst athr_id) vce(cluster inst)
 72.             gunique athr_id if `c'
 73.             local num_movers = r(unique)
 74.             local normalize = _b[lag1]
 75.             foreach var in `lags' treat `leads' {
 76.                 mat row = _b[`var']-`normalize', _se[`var']
 77.                 if "`var'" == "lag1" {
 78.                     mat row = _b[`var']-`normalize',0
 79.                 }
 80.                 mat es = nullmat(es) \ row 
 81.             }
 82.             svmat es
 83.             keep es1 es2
 84.             drop if mi(es1)
 85.             rename (es1 es2) (b se)
 86.             gen ub = b + 1.96*se
 87.             gen lb  = b - 1.96*se
 88.             gen rel = -`timeframe' if _n == 1
 89.             replace rel = rel[_n-1]+ 1 if _n > 1
 90.             drop if rel ==`timeframe' 
 91.             sum b if inrange(rel, -`timeframe',-2)
 92.             local pre_mean : di %3.2f r(mean)
 93.             sum b if inrange(rel, 1,`timeframe')
 94.             local post_mean : di %3.2f r(mean)
 95.             local end = `timeframe' - 1
 96.             replace lb = -1 if lb < -1
 97.             replace ub = 1 if ub > 1
 98.             tw rcap ub lb rel if rel != -1 & se!= 0,  lcolor(gs12) msize(v
> small) || scatter b rel if (se !=0 | rel == -1) , mcolor(ebblue) xlab(-10(1)`
> end', angle(45) labsize(vsmall)) ylab(-1(0.2)1, labsize(vsmall)) ///
>               yline(0, lcolor(black) lpattern(solid)) xline(0, lcolor(purple%
> 50) lpattern(dash)) plotregion(margin(none)) ///
>               legend(on order(- "N (Movers) = `num_movers'" ///
>                                                                 "Pre-period m
> ean = `pre_mean'" ///
>                                                                 "Post-period 
> mean = `post_mean'") pos(5) ring(0) size(vsmall) region(fcolor(none))) xtitle
> ("Relative Year to Move", size(vsmall)) ytitle("Log Productivity", size(vsmal
> l))
 99.             graph export ../output/figures/es_`samp'_`suf'`stem'.pdf, repl
> ace
100.             restore
101.         }
102.     }
103. end

. 
. program plot_prod_profile
  1.     use ../temp/age_prod, clear
  2.     replace age = age + 25
  3.     gen cohort_bin = floor(age/10)*10
  4.     replace cohort_bin = cohort_bin + 5 if age >= cohort_bin+5
  5.     gen num = impact_cite_affl * athr_cnt
  6.     bys cohort_bin : egen tot_athrs = total(athr_cnt)
  7.     bys cohort_bin : egen tot_num = total(num)
  8.     gen mean_prod = tot_num/tot_athrs
  9.     gcontract cohort_bin mean_prod
 10.     drop _freq
 11.     tw scatter mean_prod cohort_bin || line mean_prod cohort_bin
 12.     graph export ../output/figures/test.pdf, replace
 13. 
. 
. end

. 
. program output_tables
  1.     syntax, samp(str)
  2.     foreach file in cohort_dist pub_age_dist { 
  3.          qui matrix_to_txt, saving("../output/tables/`file'_`samp'.txt") m
> atrix(`file'_`samp') ///
>            title(<tab:`file'_`samp'>) format(%20.4f) replace
  4.     }
  5. 
. end

. ** 
