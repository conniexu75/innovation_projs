--------------------------------------------------------------------------------
Makelog started: 2023-08-22 22:24:07
Working directory: /export/home/dor/cxu/innovation_projs/analysis/science_geo/jrnl_samp_size/code
--------------------------------------------------------------------------------
External links successfully created!

  ___  ____  ____  ____  ____ ®
 /__    /   ____/   /   ____/      17.0
___/   /   /___/   /   /___/       MP—Parallel Edition

 Statistics and Data Science       Copyright 1985-2021 StataCorp LLC
                                   StataCorp
                                   4905 Lakeway Drive
                                   College Station, Texas 77845 USA
                                   800-STATA-PC        https://www.stata.com
                                   979-696-4600        stata@stata.com

Stata license: Unlimited-user 4-core, expiring 17 Nov 2023
Serial number: 501709306977
  Licensed to: Harvard Business School
               Research Computing

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. More than 2 billion observations are allowed; see help obs_advice.
      4. Maximum number of variables is set to 120,000; see help set_maxvar.

. do "/export/home/dor/cxu/innovation_projs/analysis/science_geo/jrnl_samp_size
> /code/analysis.do" 

. set more off

. clear all

. capture log close

. program drop _all

. set scheme modern

. pause on

. set seed 8975

. here, set
/export/home/dor/cxu/innovation_projs/analysis/science_geo/jrnl_samp_size/code/

. 
. program main
  1.     global country_name "countries"
  2.     global us_state_name "US states"
  3.     global area_name "US cities"
  4.     global city_full_name "world cities"
  5.     global inst_name "institutions"
  6.     foreach samp in cns scisub demsci med { 
  7.         local samp_type = cond(strpos("`samp'", "cns")>0 | strpos("`samp'"
> ,"med")>0, "main", "robust")
  8.         if "`samp'" == "med" { 
  9.             local samp_type "clinical"
 10.         }
 11.         get_total_articles, samp(`samp') samp_type(`samp_type')
 12.         foreach data in newfund {
 13.             if "`samp'" == "med" {
 14.                 local data clin
 15.             }
 16.             di "SAMPLE IS : `samp' `data'"
 17.                 top_jrnls, data(`data') samp(`samp') 
 18.                 samp_size, data(`data') samp(`samp') 
 19.                 mat N_`samp' = nullmat(N_`samp') \ N_`data'_`samp'
 20.             }
 21.             mat N_samp = nullmat(N_samp) \ N_`samp'
 22.             mat top_jrnls_`samp' =  nullmat(top_jrnls_`samp') , top_jrnls_
> `samp'_N
 23.             if "`samp'" != "med" {
 24.                 mat top_jrnls =  nullmat(top_jrnls) \ top_jrnls_`samp'
 25.             }
 26.     }
 27.     top_jrnls, data(newfund) samp(med)
 28.     foreach file in top_jrnls N_samp top_jrnls_med {
 29.         qui matrix_to_txt, saving("../output/tables/`file'.txt") matrix(`f
> ile') ///
>            title(<tab:`file'>) format(%20.4f) replace
 30.          }
 31. end

. 
. program get_total_articles 
  1.     syntax, samp(str) samp_type(str)
  2.     use ../external/pmids/`samp'_all_pmids, clear
  3.     if "`samp'" != "med" {
  4.         merge 1:1 pmid using ../external/new_pt/cleaned_all_jrnl_base, kee
> p(3) nogen
  5.     }
  6.     if "`samp'" == "med" {
  7.         merge 1:1 pmid using ../external/new_pt/cleaned_clin_med_base, kee
> p(3) nogen
  8.     }
  9.     // delete some weird metastudies that we can't cleanly get affiliation
> s from
. /*    drop if inlist(pmid, 33471991, 28445112, 28121514, 30345907, 27192541, 
> 25029335, 23862974, 30332564, 31995857, 34161704)
>     drop if inlist(pmid, 29669224, 35196427,26943629,28657829,34161705,311666
> 81,29539279, 33264556, 33631065, 33306283, 33356051)
>     drop if inlist(pmid, 34587383, 34260849, 34937145, 34914868, 33332779, 36
> 286256, 28657871, 35353979, 33631066, 27959715)
>     drop if inlist(pmid, 29045205, 27376580, 29800062)*/
.     cap drop _merge
 10. *    merge 1:1 pmid using ../external/wos/`samp'_appended, assert(1 2 3) 
. *    qui drop if _merge == 2
. *    tab _merge
. *    keep if doc_type == "Article"
. *    keep if strpos(doc_type, "Article")>0
.    * drop if strpos(doc_type, "Retracted")>0
. *    qui keep if _merge == 3
. *    drop _merge
.     if "`samp'" == "med" local samp_type "main"
 11.     merge 1:1 pmid using ../external/pmids/`samp'_all_pmids, assert(2 3) k
> eep(3) nogen
 12.     replace year = pub_year if !mi(pub_year)
 13.     preserve
 14.     gcontract year journal_abbr, freq(num_articles)
 15.     drop if journal_abbr == "annals"
 16.     save ../temp/`samp'_counts, replace
 17.     restore 
 18. /*    if "`samp'"!= "med" {
>         merge 1:m pmid using ../external/cleaned_samps/cleaned_all_fund_`samp
> ', assert(1 3) keep(1) nogen keepusing(pmid)
>         merge 1:m pmid using ../external/cleaned_samps/cleaned_all_dis_`samp'
> , assert(1 3) keep(1) nogen keepusing(pmid)
>         merge 1:m pmid using ../external/thera/contracted_pmids_thera, assert
> (1 2 3) keep(1) nogen keepusing(pmid)
>         keep pmid year journal_abbr
>         save ../output/`samp'_unmatched, replace
>     }*/
.     if "`samp'" == "med" {
 19.         preserve
 20.         merge 1:m pmid using ../external/openalex/cleaned_all_clin_med, as
> sert(1 2 3) keep(1) nogen keepusing(pmid)
 21.         save ../output/`samp'_unmatched, replace
 22.         restore
 23.         merge 1:m pmid using ../external/pmids/newfund_pmids, assert(1 2 3
> ) keepusing(pmid cat)
 24.         drop if _merge == 2
 25.         drop if _merge == 3 & !inlist(cat, "fundamental", "diseases")
 26.         drop _merge
 27. *        merge 1:m pmid using ../external/thera/contracted_pmids_thera, as
> sert(1 2 3) keepusing(pmid)
. *        keep if _merge == 3 | !mi(cat) 
.         save ../temp/cleaned_all_newfund_med, replace
 28.     }
 29. end

. program top_jrnls
  1.     syntax, data(str) samp(str) 
  2.     if "`data'" == "newfund" & "`samp'" == "med" {
  3.         use ../temp/cleaned_all_`data'_`samp', clear
  4.         bys pmid: gen pmid_counter = _n == 1
  5.     }
  6.     else {
  7.         use ../external/openalex/cleaned_all_`data'_`samp', clear
  8.         bys pmid: gen pmid_counter = _n == 1
  9.     }
 10.     preserve
 11.     gcollapse (sum) pmid_counter, by(journal_abbr year)
 12.     qui merge 1:1 journal_abbr year using ../temp/`samp'_counts, assert(1 
> 2 3) keep(2 3) nogen
 13.     *gen percent_of_tot = pmid_counter/num_articles
.     gcollapse (sum) num_fund = pmid_counter tot_articles = num_articles, by(j
> ournal_abbr)
 14.     gen percent_of_tot = num_fund/tot_articles * 100
 15.     gen order = 0
 16.     replace order = 1 if inlist(journal_abbr, "science","nature","cell")
 17.     qui hashsort -order -tot_articles
 18.     li 
 19.     mkmat num_fund,  mat(top_jrnls_`samp'_N)
 20.     mkmat percent_of_tot,  mat(top_jrnls_`data'_`samp')
 21.     mat top_jrnls_`samp' = nullmat(top_jrnls_`samp'), top_jrnls_`data'_`sa
> mp'
 22.     restore
 23. end 

. 
. program samp_size
  1.     syntax, data(str) samp(str) 
  2.     foreach t in all last5yrs {
  3.         use ../external/openalex/cleaned_`t'_`data'_`samp', clear
  4.         di "SAMPLE IS  `data' `samp' `t':"
  5.         qui gunique pmid
  6.         di "# articles = " r(unique)
  7.         mat N_`data'_`samp'_`t' = r(unique)
  8.         qui gunique pmid which_athr
  9.         di "# athr-articles = " r(unique)
 10.         qui gunique pmid which_athr which_affl if !mi(inst)
 11.         di "# athr-affl-articles = " r(unique)
 12.         mat N_`data'_`samp' = nullmat(N_`data'_`samp') , N_`data'_`samp'_`
> t'
 13.     }
 14. end

. ** 
. main

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                           230,127  
    -----------------------------------------

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                           230,127  
    -----------------------------------------
pub_year not found
r(111);

end of do-file
r(111);

