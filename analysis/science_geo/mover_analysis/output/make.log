--------------------------------------------------------------------------------
Makelog started: 2024-09-08 23:16:31
Working directory: /export/projects4/achandra_basicscience/analysis/science_geo/mover_analysis/code
--------------------------------------------------------------------------------
External links successfully created!

  ___  ____  ____  ____  ____ ®
 /__    /   ____/   /   ____/      18.0
___/   /   /___/   /   /___/       MP—Parallel Edition

 Statistics and Data Science       Copyright 1985-2023 StataCorp LLC
                                   StataCorp
                                   4905 Lakeway Drive
                                   College Station, Texas 77845 USA
                                   800-STATA-PC        https://www.stata.com
                                   979-696-4600        stata@stata.com

Stata license: Unlimited-user 4-core network, expiring 17 Nov 2024
Serial number: 501809301897
  Licensed to: Harvard Business School
               Research Computing

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. More than 2 billion observations are allowed; see help obs_advice.
      4. Maximum number of variables is set to 120,000; see help set_maxvar.

. do "/export/projects4/achandra_basicscience/analysis/science_geo/mover_analys
> is/code/analysis.do" 

. set more off

. clear all

. capture log close

. program drop _all

. set scheme modern

. graph set window fontface "Arial Narrow"
not available in non-GUI version

. pause on

. set seed 8975

. global year_insts "/export/scratch/cxu_sci_geo/clean_athr_inst_hist_output"

. global y_name "Productivity"

. global pat_adj_wt_name "Patent-to-Paper Citations"

. global ln_patent_name "Log Patent-to-Paper Citations"

. global ln_y_name "Log Productivity"

. global x_name "Cluster Size"

. global ln_x_name "Log Cluster Size"

. global time year 

. 
. program main
  1.     use ../external/year_insts/filled_in_panel_${time}, clear
  2.     keep if country_code == "US"
  3.     hashsort athr_id year
  4.     gen place_count =  1 if inst_id != inst_id[_n-1] //&  msa_comb != msa_
> comb[_n-1]
  5.     bys athr_id: egen num_moves = total(place_count)
  6.     bys athr_id (year): gen which_place = sum(place_count)
  7.     bys athr_id: gen athr_counter =  _n == 1
  8.     replace num_moves = num_moves-1
  9.     bys athr_id (year) : gen move_year = year if place_count == 1  & _n !=
>  1
 10.     bys athr_id : egen first_pub_yr  = min(year)
 11.     gcontract athr_id  move_year  num_moves first_pub_yr
 12.     drop _freq
 13.     drop if mi(move_year)
 14.     drop if num_moves <= 0
 15.     save ../temp/movers, replace
 16. 
.     foreach t in year_firstlast year {
 17.         qui make_movers, samp(`t')
 18.         qui sum_stats, samp(`t')
 19.         qui output_tables, samp(`t')
 20.         qui make_dest_origin, samp(`t')
 21.         qui event_study, samp(`t') timeframe(10) ymax(1) ygap(0.1) 
 22.         qui event_study, samp(`t') timeframe(8) startyr(1945) endyr(1980) 
> ymax(1) ygap(0.1)
 23.         qui event_study, samp(`t') timeframe(8) startyr(1980) endyr(1995) 
> ymax(1) ygap(0.1)
 24.         qui event_study, samp(`t') timeframe(8) startyr(1995) endyr(2023) 
> ymax(1) ygap(0.1)
 25.     }
 26. end

. 
. program make_movers
  1.     syntax, samp(str)
  2.     use athr_id field msa_comb year inst_id msa_size impact_cite_affl_wt a
> vg_team_size if !mi(msa_comb) & !mi(inst_id) using ../external/samp/athr_pane
> l_full_comb_`samp', clear 
  3.     hashsort athr_id year
  4.     gen place_count =  1 if inst_id != inst_id[_n-1] //& msa_comb != msa_c
> omb[_n-1]
  5.     bys athr_id: egen num_moves = total(place_count)
  6.     bys athr_id (year): gen which_place = sum(place_count)
  7.     bys athr_id: gen athr_counter =  _n == 1
  8.     replace num_moves = num_moves-1
  9.     gen mover = num_moves > 0 
 10.     tab num_moves if athr_counter == 1 & mover == 1
 11.     tab mover if athr_counter == 1
 12.     bys athr_id year: gen athr_year_counter =  _n == 1
 13.     tab mover if athr_year_counter == 1
 14.     replace which_place = 0 if mover == 0
 15.     replace which_place = 1 if which_place == 0 & mover == 1
 16.     bys athr_id: egen min_which_place =min(which_place)
 17.     replace which_place = which_place + 1 if mover == 1 & min_which_place 
> == 0
 18.     drop min_which_place
 19.     hashsort athr_id year 
 20.     bys athr_id (year): gen origin = 1 if which_place == 1
 21.     gen dest = place_count == 1 & origin != 1 & mover == 1
 22.     bys athr_id (year): replace origin = 1 if mover == 1 & place_count[_n+
> 1] == 1 & mi(origin) 
 23.     hashsort athr_id which_place origin
 24.     bys athr_id which_place:  replace origin = origin[_n-1] if mi(origin) 
> & !mi(origin[_n-1])
 25. 
.     preserve
 26.     keep if mover == 1 & num_moves == 1 
 27.     gcontract athr_id year
 28.     drop _freq
 29.     bys athr_id: egen min_year = min(year)
 30.     bys athr_id: egen max_year = max(year)
 31.     gcontract athr_id min_year max_year
 32.     drop _freq
 33.     save ../temp/single_movers_`samp', replace
 34. 
.     merge 1:m athr_id using ../temp/movers, assert(1 2 3) keep(3) nogen
 35.     keep if move_year >= min_year & move_year <= max_year
 36.     gcontract athr_id move_year first_pub_yr
 37.     drop _freq
 38.     bys athr_id: gen N = _n 
 39.     keep if N == 1
 40.     save ../temp/mover_xw_`samp', replace
 41.     restore
 42. 
.     merge m:1 athr_id using ../temp/mover_xw_`samp', assert(1 2 3) keep(1 3) 
 43.     bys inst_id year: egen has_mover = max(mover == 1)
 44.     drop if has_mover == 0
 45.     gen analysis_cond = mover == 1 & num_moves == 1 & ((mover == 0 & _merg
> e == 1) | (mover == 1 & _merge == 3))
 46.     drop _merge
 47.     drop has_mover place_count athr_counter athr_year_counter N
 48.     save ../temp/mover_temp_`samp' , replace
 49. end

. 
. program sum_stats
  1.     syntax, samp(str)
  2.     use ../temp/mover_temp_`samp' , clear  
  3.     gegen msa = group(msa_comb)
  4.     gen ln_y = ln(impact_cite_affl_wt)
  5.     gen ln_x = ln(msa_size)
  6.     rename impact_cite_affl_wt y
  7.     rename msa_size x
  8. 
.     // individual level stats
.     preserve
  9.     bys athr_id: gen num_years = _N
 10.     bys athr_id inst_id : gen inst_cntr = _n == 1
 11.     bys athr_id : egen num_insts = total(inst_cntr)
 12.     gen life_time_prod = y
 13.     gcollapse (mean) num_years num_moves avg_team_size x y num_insts mover
>  (min) analysis_cond (sum) life_time_prod, by(athr_id)
 14.     count
 15.     foreach var in num_years avg_team_size x y life_time_prod num_moves {
 16.         sum `var'
 17.         mat ind_stats = nullmat(ind_stats) \ (r(mean) , r(sd))
 18.     }
 19.     count if mover == 0 
 20.     foreach var in num_years avg_team_size x y life_time_prod {
 21.         sum `var' if mover == 0 
 22.         mat ind_stats = nullmat(ind_stats) \ (r(mean) , r(sd))
 23.     } 
 24.     count if mover == 1
 25.     foreach var in num_years avg_team_size x y life_time_prod {
 26.         sum `var' if mover == 1 
 27.         mat ind_stats = nullmat(ind_stats) \ (r(mean) , r(sd))
 28.     }
 29.     count if analysis_cond == 1 
 30.     foreach var in num_years avg_team_size x y life_time_prod {
 31.         sum `var' if analysis_cond == 1  
 32.         mat ind_stats = nullmat(ind_stats) \ (r(mean) , r(sd))
 33.     }
 34.     restore
 35. 
.     preserve
 36.     gen life_time_prod = y
 37.     bys msa_comb inst_id: gen inst_cntr = _n == 1
 38.     bys msa_comb: egen num_insts = total(inst_cntr)
 39.     gcollapse (mean) x y num_insts (sum) life_time_prod, by(inst_id)
 40.     count
 41.     foreach var in num_insts x y life_time_prod {
 42.         qui sum `var' 
 43.         mat city_stats = nullmat(city_stats) \ (r(mean), r(sd))
 44.     }
 45.     restore
 46.     
.     mat stat_`samp' = ind_stats \ city_stats 
 47. end 

. 
. program make_dest_origin
  1.     syntax, samp(str)
  2.     use ../temp/mover_temp_`samp' , clear  
  3.     gegen msa = group(msa_comb)
  4.     gen ln_y = ln(impact_cite_affl_wt)
  5.     gen ln_x = ln(msa_size)
  6.     rename impact_cite_affl_wt y
  7.     rename msa_size x
  8.     foreach loc in inst_id msa_comb {
  9.         preserve
 10.         if "`loc'" == "inst_id" {
 11.             local suf inst 
 12.         }
 13.         if "`loc'" == "msa_comb" {
 14.             local suf msa 
 15.         }
 16.         gcollapse (mean) `suf'_ln_y = ln_y `suf'_ln_x = ln_x  (firstnm) ms
> a , by(`loc' ${time}) 
 17.         foreach v in `suf'_ln_y `suf'_ln_x {
 18.             bys `loc' (year): gen pre_`v' = (`v'+`v'[_n-1])/2
 19.             bys `loc' (year): gen post_`v' = (`v'+`v'[_n+1])/2
 20.         }
 21.         save ../temp/`suf'_`samp'_collapsed, replace
 22.         restore
 23.     }
 24.         
.     use if analysis_cond == 1  using ../temp/mover_temp_`samp' , clear  
 25.     merge m:1 athr_id using ../temp/mover_xw_`samp', assert(1 2 3) keep(3)
>  nogen
 26.     gen ln_y = ln(impact_cite_affl_wt)
 27.     gen ln_x = ln(msa_size)
 28.     hashsort athr_id which_place year
 29.     rename impact_cite_affl_wt y
 30.     rename msa_size x
 31.     gen rel = year - move_year
 32.     foreach var in ln_x ln_y {
 33.         bys athr_id which_place: egen avg_`var' = mean(`var') 
 34.     }
 35.     hashsort athr_id which_place -year
 36.     gduplicates drop athr_id which_place, force
 37.     rename year current_year
 38.     gen year = current_year if which_place == 1
 39.     replace year = move_year if which_place == 2
 40.     merge m:1 inst_id year using ../temp/inst_`samp'_collapsed, assert(1 2
>  3) keep(3) nogen
 41.     merge m:1 msa_comb year using ../temp/msa_`samp'_collapsed, assert(1 2
>  3) keep(3) nogen keepusing(msa_ln_x pre_msa_ln_x post_msa_ln_x)
 42.     hashsort athr_id which_place year
 43.     foreach var in avg_ln_x avg_ln_y inst_ln_y inst_ln_x msa_ln_x {
 44.         if strpos("`var'", "avg_") == 0 {
 45.             local type "Destination-Origin Difference in"
 46.             local stem = subinstr(subinstr("`var'", "msa_","",.), "inst_",
>  "",.)
 47.             by athr_id (which_place year): gen `var'_diff = `var'[_n+1] - 
> `var'
 48.             *by athr_id (which_place year): gen `var'_diff = post_`var'[_n
> +1] - pre_`var'
.         }
 49.         if strpos("`var'", "avg_") > 0 {
 50.             local type "Change in"
 51.             local stem = subinstr("`var'", "avg_","",.)
 52.             by athr_id (which_place year): gen `var'_diff = `var'[_n+1] - 
> `var'
 53.         }
 54.         qui sum `var'_diff
 55.         local N = r(N)
 56.         local mean : dis %3.2f r(mean)
 57.         local sd : dis %3.2f r(sd)
 58.         tw hist `var'_diff, frac ytitle("Share of Movers", size(vsmall)) x
> title("`type' ${`stem'_name}", size(vsmall)) color(edkblue) xlab(, labsize(vs
> mall)) ylab(, labsize(vsmall)) legend(on order(- "N (Movers) = `N'" ///
>                                                         "Mean = `mean'" ///
>                                                         "            (`sd')")
>  pos(1) ring(0) size(vsmall) region(fcolo(none)))
 59.         graph export ../output/figures/`var'_diff_`samp'.pdf, replace
 60.     }
 61. 
. 
.     reg avg_ln_y_diff inst_ln_y_diff  
 62.     local N = e(N)
 63.     local coef : dis %3.2f _b[inst_ln_y_diff]
 64.     binscatter2 avg_ln_y_diff inst_ln_y_diff,  mcolor(gs5) lcolor(ebblue) 
> xlab(, labsize(vsmall)) ylab(, labsize(vsmall)) xtitle("Destination-Origin Di
> fference in Log Productivity", size(vsmall)) ytitle("Change in Log Productivi
> ty after Move", size(vsmall)) legend(on order(- "N (Movers) = `N'" ///
>                                                             "Slope = `coef'")
>  pos(5) ring(0) size(vsmall) region(fcolor(none)))
 65.     graph export ../output/figures/place_effect_desc_`samp'.pdf , replace
 66.     
.     gen origin_loc = msa_comb if which_place  == 1
 67.     gen dest_loc = msa_comb if which_place  == 2
 68.     hashsort athr_id which_place year
 69.     by athr_id : replace dest_loc = dest_loc[_n+1] if mi(dest_loc)
 70.     by athr_id : replace origin_loc = origin_loc[_n-1] if mi(origin_loc)
 71.     gcontract athr_id avg_ln_y_diff avg_ln_x_diff inst_ln_y_diff inst_ln_x
> _diff move_year origin_loc dest_loc msa_ln_x_diff
 72.     drop _freq
 73.     drop if mi(avg_ln_y_diff)
 74.     save ../temp/dest_origin_changes, replace
 75. end

. 
. program event_study 
  1.     syntax, samp(str) timeframe(int) [startyr(int 1945) endyr(int 2023) ym
> ax(real 1) ygap(real 0.2)] 
  2.     cap mat drop _all  
  3.     use if analysis_cond == 1 & inrange(year, `startyr', `endyr')  using .
> ./temp/mover_temp_`samp' , clear  
  4.     merge m:1 athr_id using ../temp/mover_xw_`samp', assert(1 2 3) keep(3)
>  nogen
  5.     keep athr_id inst field year msa_comb impact_cite_affl_wt msa_size whi
> ch_place inst_id move_year first_pub_yr
  6.     hashsort athr_id year
  7.     gen rel = year - move_year
  8.     merge m:1 athr_id move_year using ../temp/dest_origin_changes, keep(3)
>  nogen
  9.     hashsort athr_id year
 10.     gegen msa = group(msa_comb)
 11.     gegen inst = group(inst_id)
 12.     gen ln_y = ln(impact_cite_affl_wt)
 13.     forval i = 1/`timeframe' {
 14.         gen lag`i' = 1 if rel == -`i'
 15.         gen lead`i' = 1 if rel == `i'
 16.         gen int_lag`i' = 1 if rel == -`i'
 17.         gen int_lead`i' = 1 if rel == `i'
 18.     }
 19.     ds int_lead* int_lag*
 20.     foreach var in `r(varlist)' {
 21.         replace `var' = 0 if mi(`var')
 22.         replace `var' = `var'*inst_ln_y_diff
 23.     }
 24.     ds lead* lag*
 25.     foreach var in `r(varlist)' {
 26.         replace `var' = 0 if mi(`var')
 27.     }
 28.     gen int_treat = inst_ln_y_diff if rel == 0  
 29.     gen treat = 1 if rel == 0  
 30.     replace int_treat = 0 if mi(int_treat)
 31.     replace treat = 0 if mi(treat)
 32.     local leads
 33.     local int_leads
 34.     local lags
 35.     local int_lags
 36.     forval i = 1/`timeframe' {
 37.         local leads `leads' lead`i'
 38.         local int_leads `int_leads' int_lead`i'
 39.     }
 40.     forval i = 2/`timeframe' {
 41.         local lags lag`i' `lags'
 42.         local int_lags int_lag`i' `int_lags'
 43.     }
 44.     gunique athr_id 
 45.     local num_movers = r(unique)
 46.         gen move_age_pub = move_year - first_pub_yr  + 1 + 25
 47.     egen pos_move_size = cut(inst_ln_y_diff) if inst_ln_y_diff > 0, group(
> 2)
 48.     egen neg_move_size = cut(inst_ln_y_diff) if inst_ln_y_diff < 0, group(
> 2)
 49.     gen l2h_move = inst_ln_y_diff > 0
 50.     gen h2l_move = inst_ln_y_diff < 0
 51.     gen s2b_move = msa_ln_x_diff > 0
 52.     gen b2s_move = msa_ln_x_diff < 0
 53.         by athr_id: gen counter = _n == 1
 54.         sum move_age_pub if counter == 1, d
 55.         gen old = move_age_pub >= r(p50)
 56.     gen young = move_age_pub < r(p50)
 57.     foreach cond in "" "& l2h_move== 1" "& h2l_move == 1" "& b2s_move == 1
> " "& s2b_move == 1"  "& old == 1" "& young == 1" {
 58.         local c "inrange(rel,-`timeframe',`timeframe') `cond'"
 59.         local suf = ""
 60.         if "`cond'" == "& l2h_move== 1" {
 61.             local suf = "_l2h"
 62.         }
 63.         else if "`cond'" == "& h2l_move == 1" {
 64.             local suf = "_h2l"
 65.         }
 66.         else if "`cond'" == "& b2s_move == 1" {
 67.             local suf = "_b2s"
 68.         }
 69.         else if "`cond'" == "& s2b_move == 1" {
 70.             local suf = "_s2b"
 71.         }
 72.         else if "`cond'" == "& pos_move_size == 1" {
 73.             local suf = "_ll2hh"
 74.         }
 75.         else if "`cond'" == "& neg_move_size == 0" {
 76.             local suf = "_hh2ll"
 77.         }
 78.                 else if "`cond'" == "& old == 1" {
 79.             local suf = "_old"
 80.         }
 81.                 else if "`cond'" == "& young == 1" {
 82.             local suf = "_young"
 83.         }
 84.         preserve
 85.         mat drop _all
 86.         reghdfe ln_y `lags' `leads' lag1 treat `int_lags' int_treat `int_l
> eads' int_lag1  if `c' , absorb(year field field#year athr_fes = athr_id) vce
> (cluster inst)
 87.         estimates save ../output/es_`startyr'_`endyr'_`samp'`suf', replace
 88.         gunique athr_id if `c'
 89.         local num_movers = r(unique)
 90.         foreach var in `int_lags' int_treat `int_leads' int_lag1 {
 91.             mat row = _b[`var'], _se[`var']
 92.             if "`var'" == "int_lag1" {
 93.                 mat row = 0,0
 94.             }
 95.             mat es = nullmat(es) \ row 
 96.         }
 97.         svmat es
 98.         keep es1 es2
 99.         drop if mi(es1)
100.         rename (es1 es2) (b se)
101.         gen ub = b + 1.96*se
102.         gen lb  = b - 1.96*se
103.         gen rel = -`timeframe' if _n == 1
104.         replace rel = rel[_n-1]+ 1 if _n > 1
105.         replace rel = rel+ 1 if rel >= -1
106.         replace rel = -1 if rel == `timeframe'+1
107.         sum b if inrange(rel, -`timeframe',-2)
108.         local pre_mean : di %3.2f r(mean)
109.         sum b if inrange(rel, 1,`timeframe')
110.         local post_mean : di %3.2f r(mean)
111.         replace lb = -1 if lb < -1
112.         replace ub = 1 if ub > 1
113.                 save ../temp/es_coefs_`startyr'_`endyr'_`samp'`suf', repla
> ce
114.         tw rcap ub lb rel if rel != -1,  lcolor(ebblue%50) msize(vsmall) |
> | scatter b rel if se !=0 | rel == -1, msize(small) mcolor(ebblue%50) xlab(-`
> timeframe'(1)`timeframe', angle(45) labsize(vsmall)) ylab(-`ymax'(`ygap')`yma
> x', labsize(vsmall)) ///
>           yline(0, lcolor(black) lpattern(solid)) xline(0, lcolor(gs12) lpatt
> ern(dash))  ///
>           legend(on order(- "N (Movers) = `num_movers'" ///
>                                                             "Pre-period mean 
> = `pre_mean'" ///
>                                                             "Post-period mean
>  = `post_mean'") pos(5) ring(0) size(vsmall) region(fcolor(none))) xtitle("Re
> lative Year to Move", size(vsmall)) ytitle("Log Productivity", size(vsmall))
115.         graph export ../output/figures/es`startyr'_`endyr'_`samp'`suf'.pdf
> , replace
116.         restore
117.     }
118.         gunique athr_id if l2h_move== 1
119.     local l2h_num_movers = r(unique)
120.         gunique athr_id if h2l_move== 1
121.     local h2l_num_movers = r(unique)
122.         
.         gunique athr_id if s2b_move== 1
123.     local s2b_num_movers = r(unique)
124.         gunique athr_id if b2s_move== 1
125.     local b2s_num_movers = r(unique)
126.         gunique athr_id if young== 1
127.     local young_num_movers = r(unique)
128.         gunique athr_id if old== 1
129.     local old_num_movers = r(unique)
130. 
.         // merge l2h h2
.         use ../temp/es_coefs_`startyr'_`endyr'_`samp'_l2h, clear
131.         gen cat = "l2h"
132.         replace rel = rel - 0.09
133.         append using ../temp/es_coefs_`startyr'_`endyr'_`samp'_h2l
134.         replace cat = "h2l" if mi(cat)
135.         replace rel = rel + 0.09 if cat == "h2l"
136.         tw rcap ub lb rel if rel != -1.09 & cat == "l2h",  lcolor(lavender
> %70) msize(vsmall) || ///
>            scatter b rel if cat == "l2h", mcolor(lavender%70) msize(small) ||
>  ///
>            rcap ub lb rel if rel != -0.91 & cat == "h2l",  lcolor(orange%70) 
> msize(vsmall) || ///
>            scatter b rel if cat == "h2l", mcolor(orange%70) msymbol(smdiamond
> ) msize(small) /// 
>            xlab(-`timeframe'(1)`timeframe', angle(45) labsize(vsmall)) ylab(-
> `ymax'(`ygap')`ymax', labsize(vsmall)) ///
>           yline(0, lcolor(black) lpattern(solid)) xline(0, lcolor(gs12) lpatt
> ern(dash))  ///
>           legend(on order(2 "Low to High Productivity Place Movers (N = `l2h_
> num_movers')" 4 "High to Low Productivity Place Movers (N = `h2l_num_movers')
> ") pos(5) ring(0) size(vsmall) region(fcolor(none))) xtitle("Relative Year to
>  Move", size(vsmall)) ytitle("Log Productivity", size(vsmall))
137.     graph export ../output/figures/es`startyr'_`endyr'_`samp'_prodchg.pdf,
>  replace
138.         
.         // merge s2b b2s
.         use ../temp/es_coefs_`startyr'_`endyr'_`samp'_s2b, clear
139.         gen cat = "s2b"
140.         replace rel = rel - 0.09
141.         append using ../temp/es_coefs_`startyr'_`endyr'_`samp'_b2s
142.         replace cat = "b2s" if mi(cat)
143.         replace rel = rel + 0.09 if cat == "b2s"
144.         tw rcap ub lb rel if rel != -1.09 & cat == "s2b",  lcolor(lavender
> %70) msize(vsmall) || ///
>            scatter b rel if cat == "s2b", mcolor(lavender%70) msize(small) ||
>  ///
>            rcap ub lb rel if rel != -0.91 & cat == "b2s",  lcolor(orange%70) 
> msize(vsmall) || ///
>            scatter b rel if cat == "b2s", mcolor(orange%70) msymbol(smdiamond
> ) msize(small) /// 
>            xlab(-`timeframe'(1)`timeframe', angle(45) labsize(vsmall)) ylab(-
> `ymax'(`ygap')`ymax', labsize(vsmall)) ///
>           yline(0, lcolor(black) lpattern(solid)) xline(0, lcolor(gs12) lpatt
> ern(dash))  ///
>           legend(on order(2 "Small to Big Place Movers (N = `s2b_num_movers')
> " 4 "Big to Small Place Movers (N = `b2s_num_movers')") pos(5) ring(0) size(v
> small) region(fcolor(none))) xtitle("Relative Year to Move", size(vsmall)) yt
> itle("Log Productivity", size(vsmall))
145.     graph export ../output/figures/es`startyr'_`endyr'_`samp'_sizechg.pdf,
>  replace
146.         
.         // merge young old
.         use ../temp/es_coefs_`startyr'_`endyr'_`samp'_young, clear
147.         gen cat = "young"
148.         replace rel = rel - 0.09
149.         append using ../temp/es_coefs_`startyr'_`endyr'_`samp'_old
150.         replace cat = "old" if mi(cat)
151.         replace rel = rel + 0.09 if cat == "old"
152.         tw rcap ub lb rel if rel != -1.09 & cat == "young",  lcolor(lavend
> er%70) msize(vsmall) || ///
>            scatter b rel if cat == "young" & rel > -8, mcolor(lavender%70) ms
> ize(small)|| ///
>            rcap ub lb rel if rel != -0.91 & cat == "old",  lcolor(orange%70) 
> msize(vsmall) || ///
>            scatter b rel if cat == "old", mcolor(orange%70) msymbol(smdiamond
> ) msize(small) /// 
>            xlab(-`timeframe'(1)`timeframe', angle(45) labsize(vsmall)) ylab(-
> `ymax'(`ygap')`ymax', labsize(vsmall)) ///
>           yline(0, lcolor(black) lpattern(solid)) xline(0, lcolor(gs12) lpatt
> ern(dash))  ///
>           legend(on order(2 "Movers Aged < 40 (N = `young_num_movers')" 4 "Mo
> vers Aged >= 40 (N = `old_num_movers')") pos(5) ring(0) size(vsmall) region(f
> color(none))) xtitle("Relative Year to Move", size(vsmall)) ytitle("Log Produ
> ctivity", size(vsmall))
153.     graph export ../output/figures/es`startyr'_`endyr'_`samp'_age.pdf, rep
> lace
154. end

. 
. program output_tables
  1.     syntax, samp(str)
  2.     foreach file in stat { 
  3.          qui matrix_to_txt, saving("../output/tables/`file'_`samp'.txt") m
> atrix(`file'_`samp') ///
>            title(<tab:`file'_`samp'>) format(%20.4f) replace
  4.     }
  5. 
. end

. ** 
. main
(22,034,336 observations deleted)
(9,129,711 missing values generated)
(10,958,788 real changes made)
(9,845,728 missing values generated)
(721,133 observations deleted)
(1,075 observations deleted)
(file ../temp/movers.dta not found)
file ../temp/movers.dta saved

. 
end of do-file

--------------------------------------------------------------------------------
Makelog ended: 2024-09-08 23:22:00
Working directory: /export/projects4/achandra_basicscience/analysis/science_geo/mover_analysis/code
--------------------------------------------------------------------------------
